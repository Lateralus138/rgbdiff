name: working linux build

on:
  workflow_run:
    workflows: [working windows build]
    types: [completed]
    branches: [working]

jobs:
  working_linux_build_test:
    runs-on: ubuntu-24.04
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: A
        uses: actions/checkout@v4
        with:
          ref: working
      - name: AA
        shell: bash
        id: aaa
        run: |
          filea=$(cat ./linux/src/main.cpp | base64)
          echo "filea=$filea" >> "$GITHUB_OUTPUT"
      - name: B
        uses: actions/checkout@v4
        with:
          ref: master
      - name: BB
        shell: bash
        run: |
          line=$(printf "%0.s-" {1..50})
          line="${line}\n${line}\n${line}"
          echo -e "$line"
          echo "${{ steps.aaa.outputs.filea }}" | base64 --decode
          echo -e "$line"
          echo "$(echo ${{ steps.aaa.outputs.filea }} | base64 --decode)" > main.cpp
          diff --side-by-side --suppress-common-lines main.cpp ./linux/src/main.cpp
          exit 1
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: working
      - name: Working Test For Source File Changes
        shell: bash
        id: working_test_for_source_file_changes
        run: |
          files_i=($(find -not -path "./.git/*" -not -path "./.git"))
          files_init="${files_i[0]}"
          for index in $(seq 2 ${#files_i[@]}); do
            files_init="${files_init},${files_i[$(($index - 1))]}"
          done
          linux_files_changed=false
          {
            GREP_COMMAND=('grep' '-E' '^.*(\.(sh|cpp|h)|([mM][aA][kK][eE][fF][iI][lL][eE]|[pP][rR][eE][bB][uU][iI][lL][dD]|[wW][oO][rR][kK][iI][nN][gG]_[lL][iI][nN][uU][xX]_[bB][uU][iI][lL][dD]\.[yY][mM][lL]))$' '--color=never')
            linux_files=($(git diff --name-only HEAD^ HEAD | "${GREP_COMMAND[@]}"))
          } || {
            echo "No changes found."
          }
          if [[ ${#linux_files[@]} -gt 0 ]]; then
            linux_files_changed=true
          fi
          echo "linux_files_changed=$linux_files_changed" >> $GITHUB_OUTPUT
          echo "files_init=$files_init" >> $GITHUB_OUTPUT
      - name: Working Linux Build Test
        shell: bash
        id: working_linux_test_build
        if: steps.working_test_for_source_file_changes.outputs.linux_files_changed == 'True'
        run: |
          chmod +x ./scripts/buildlinux.sh
          chmod +x ./linux/prebuild
          ./scripts/buildlinux.sh
          chmod 0644 ./scripts/buildlinux.sh
          chmod 0644 ./linux/prebuild
          linux_build_exists=false
          if [[ -e "./build/linux/rgbdiff" ]]; then
            linux_build_exists=true
          fi
          files_ii=($(find -not -path "./.git/*" -not -path "./.git"))
          files_exit="${files_ii[0]}"
          for index2 in $(seq 2 ${#files_ii[@]}); do
            files_exit="${files_exit},${files_ii[$(($index2 - 1))]}"
          done
          echo "linux_build_exists=$linux_build_exists" >> $GITHUB_OUTPUT
          echo "files_exit=$files_exit" >> $GITHUB_OUTPUT
      - name: Working Linux Test For Merge
        shell: bash
        id: working_linux_build_cleanup
        if: steps.working_linux_test_build.outputs.linux_build_exists == 'True'
        run: |
          line=$(printf '%0.s=' {1..50})
          line="$line\n$line"
          oIFS=$IFS
          IFS=','
          read -a file_init_array <<< "${{ steps.working_test_for_source_file_changes.outputs.files_init }}"
          read -a file_exit_array <<< "${{ steps.working_linux_test_build.outputs.files_exit }}"
          echo -e "$line"
          temp="$(echo ${file_init_array[@]} ${file_exit_array[@]} | tr ' ' '\n' | sort | uniq -u | tr '\n' ',')"
          read -a paths <<< ${temp::-1}
          for item in "${paths[@]}"; do
            if [[ -e "$item" ]]; then
              if [[ -d "$item" ]]; then
                rm -rf "$item" || exit 255
              else
                rm -f "$item" || exit 254
              fi
            fi
          done 
          echo -e "$line"
      - name: Commit files
        if: steps.working_linux_build_cleanup.outcome == 'success'
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git checkout master
          git pull
          git merge working
          git commit -a -m "Add changes"
          git push
# - uses: actions/checkout@master
# - name: Merge working -> master
#   if: steps.working_linux_build_cleanup.outcome == 'success'
#   uses: devmasx/merge-branch@master
#   with:
#     type: now
#     target_branch: master
#     github_token: ${{ secrets.GITHUB_TOKEN }}