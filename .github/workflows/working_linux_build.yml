name: working linux build

on:
  workflow_run:
    workflows: [working windows build]
    types: [completed]
    branches: [working]

jobs:
  working_linux_build_test:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Working Test For Source File Changes
        shell: bash
        id: working_test_for_source_file_changes
        run: |
          files_init=($(find -not -path "./.git/*" -not -path "./.git"))
          linux_files_changed=false
          {
            GREP_COMMAND=('grep' '-E' '^.*(\.(sh|cpp|h)|([mM][aA][kK][eE][fF][iI][lL][eE]|[pP][rR][eE][bB][uU][iI][lL][dD]|[wW][oO][rR][kK][iI][nN][gG]_[lL][iI][nN][uU][xX]_[bB][uU][iI][lL][dD]\.[yY][mM][lL]))$' '--color=never')
            linux_files=($(git diff --name-only HEAD^ HEAD | "${GREP_COMMAND[@]}"))
          } || {
            echo "No changes found."
          }
          if [[ ${#linux_files[@]} -gt 0 ]]; then
            linux_files_changed=true
          fi
          echo "linux_files_changed=$linux_files_changed" >> $GITHUB_OUTPUT
          echo "files_init=$files_init" >> $GITHUB_OUTPUT
      - name: Working Linux Build Test
        shell: bash
        id: working_linux_test_build
        if: steps.working_test_for_source_file_changes.outputs.linux_files_changed == 'True'
        run: |
          chmod +x ./scripts/buildlinux.sh
          chmod +x ./linux/prebuild
          ./scripts/buildlinux.sh
          linux_build_exists=false
          if [[ -e "./build/linux/rgbdiff" ]]; then
            linux_build_exists=true
          fi
          files_exit=($(find -not -path "./.git/*" -not -path "./.git"))
          echo "linux_build_exists=$linux_build_exists" >> $GITHUB_OUTPUT
          echo "files_exit=$files_exit" >> $GITHUB_OUTPUT
      - name: Working Linux Test For Merge
        shell: bash
        if: steps.working_linux_test_build.outputs.linux_build_exists == 'True'
        run: |
          line=$(printf '%0.s=' {1..50})
          line="$line\n$line"
          echo -e "$line"
          for file in ${{ steps.working_test_for_source_file_changes.outputs.files_init }}; do
            echo "$file"
          done
          echo -e "$line"
          for file in ${{ steps.working_test_for_source_file_changes.outputs.files_exit }}; do
            echo "$file"
          done
          echo -e "$line"
          echo ${{ steps.working_test_for_source_file_changes.outputs.files_init }} ${{ steps.working_test_for_source_file_changes.outputs.files_exit }} | tr ' ' '\n' | sort | uniq -u
          echo -e "$line"


          